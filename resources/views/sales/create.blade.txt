<x-app-layout>
    <div class="space-y-6">
        <!-- Page Heading -->
        <div class="flex items-center justify-between">
            <h2 class="text-xl font-bold text-gray-800 dark:text-gray-100">
                <span class="inline-flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-indigo-600" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    {{ __('Buat Penjualan Baru') }}
                </span>
            </h2>
        </div>

        <!-- Error Messages -->
        @if ($errors->any())
            <div class="rounded-lg bg-red-50 dark:bg-red-900/50 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400 dark:text-red-300" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Ada kesalahan dalam pengisian
                            form:</h3>
                        <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                            <ul class="list-disc pl-5 space-y-1">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        @endif

        <form action="{{ route('sales.store') }}" method="POST" id="saleForm">
            @csrf

            <!-- Section: Informasi Penjualan -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700">
                <h3
                    class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600 dark:text-indigo-400"
                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Informasi Penjualan
                </h3>
                {{-- <input type="hidden" name="new_customer_name" id="new_customer_name"> --}}
                <input type="hidden" name="customer_name" id="new_customer_name">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                    <div>
                        <x-input-label for="invoice_number" value="Nomor Faktur" />
                        <x-text-input id="invoice_number" name="invoice_number" type="text"
                            class="mt-1 block w-full bg-gray-50 dark:bg-gray-700" :value="$invoiceNumber" readonly />
                    </div>

                    <div>
                        <x-input-label for="date" value="Tanggal" />
                        <x-text-input id="date" name="date" type="date" class="mt-1 block w-full"
                            :value="old('date', date('Y-m-d'))" required />
                    </div>

                    <div>
                        <x-input-label for="customer_select" value="Nama Pelanggan" />
                        <select id="customer_select" name="customer_id"
                            class="select2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                            <option value="">-- Pilih Pelanggan atau Ketik Nama Baru --</option>
                            @foreach ($customers as $customer)
                                <option value="{{ $customer->id }}">{{ $customer->nama }} -
                                    {{ $customer->kecamatan_nama }},
                                    {{ $customer->kabupaten_nama }}</option>
                            @endforeach
                        </select>
                        <div class="mt-1 text-xs text-gray-500">Pilih pelanggan yang ada atau ketik nama
                            baru</div>
                    </div>

                    <div>
                        <x-input-label for="payment_method" value="Metode Pembayaran" />
                        <select id="payment_method" name="payment_method"
                            class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
                            required>
                            <option value="cash">Tunai</option>
                            <option value="transfer">Transfer</option>
                            <option value="credit">Kredit</option>
                        </select>
                    </div>

                    <div>
                        <x-input-label for="vehicle_type" value="Jenis Kendaraan" />
                        <select id="vehicle_type" name="vehicle_type"
                            class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300">
                            <option value="Truk">Truk</option>
                            <option value="Pickup">Pickup</option>
                        </select>
                    </div>

                    <div>
                        <x-input-label for="vehicle_number" value="Nomor Kendaraan" />
                        <x-text-input id="vehicle_number" name="vehicle_number" type="text"
                            class="mt-1 block w-full" />
                    </div>
                </div>
            </div>

            <!-- Section: Item Penjualan -->
            <div
                class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700 mt-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5 mr-2 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                        Item Penjualan
                    </h3>
                    <button type="button" onclick="addItem()"
                        class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none"
                            viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 4v16m8-8H4" />
                        </svg>
                        Tambah Item
                    </button>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                        <thead class="bg-gray-50 dark:bg-gray-700">
                            <tr>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Produk
                                </th>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Stok
                                </th>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Jumlah
                                </th>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Harga
                                </th>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Subtotal
                                </th>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    Aksi
                                </th>
                            </tr>
                        </thead>
                        <tbody id="saleItems"
                            class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Section: Perhitungan -->
            <div
                class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700 mt-6">
                <h3
                    class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600 dark:text-indigo-400"
                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Detail Pembayaran
                </h3>

                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Kolom Kiri: Total dan Diskon -->
                    <div class="space-y-4">
                        <div class="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
                            <div class="grid gap-4">
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-600 dark:text-gray-400">Total:</span>
                                    <span id="totalAmount"
                                        class="text-lg font-bold text-gray-900 dark:text-gray-100">Rp 0</span>
                                </div>

                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-600 dark:text-gray-400">Diskon:</span>
                                    <div class="w-1/2">
                                        <input type="number" name="discount" id="discount"
                                            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 text-right"
                                            value="0" min="0" onchange="calculateFinalTotal()">
                                    </div>
                                </div>

                                <div
                                    class="flex justify-between items-center pt-2 border-t border-gray-200 dark:border-gray-600">
                                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Total Setelah
                                        Diskon:</span>
                                    <span id="finalAmount"
                                        class="text-lg font-bold text-gray-900 dark:text-gray-100">Rp 0</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Kolom Kanan: Detail Pembayaran -->
                    <div class="space-y-4">
                        <!-- Pembayaran Kredit -->
                        <div id="dp_container" class="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
                            <div class="space-y-4">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-600 dark:text-gray-400">Uang Muka (DP):</span>
                                    <div class="flex space-x-2">
                                        <input type="number" name="down_payment" id="down_payment"
                                            class="w-32 rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
                                            value="0" min="0" onchange="calculateRemainingAmount()">
                                        <div class="flex space-x-1">
                                            <button type="button" onclick="setDownPayment(50)"
                                                class="px-2 py-1 text-xs font-medium text-white bg-blue-600 rounded hover:bg-blue-700">
                                                50%
                                            </button>
                                            <button type="button" onclick="setDownPayment(75)"
                                                class="px-2 py-1 text-xs font-medium text-white bg-green-600 rounded hover:bg-green-700">
                                                75%
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div
                                    class="flex justify-between items-center pt-2 border-t border-gray-200 dark:border-gray-600">
                                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Sisa
                                        Hutang:</span>
                                    <span id="remainingAmount"
                                        class="text-lg font-bold text-gray-900 dark:text-gray-100">Rp 0</span>
                                </div>
                            </div>
                        </div>

                        <!-- Pembayaran Tunai -->
                        <div id="cash-payment-section" class="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
                            <div class="space-y-4">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-600 dark:text-gray-400">Jumlah Dibayar:</span>
                                    <div class="flex space-x-2">
                                        <input type="number" name="paid_amount" id="paid_amount"
                                            class="w-32 rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
                                            value="0" min="0" onchange="calculateChange()">
                                        <button type="button" onclick="setExactAmount()"
                                            class="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-300 dark:hover:bg-gray-500">
                                            Uang Pas
                                        </button>
                                    </div>
                                </div>

                                <div
                                    class="flex justify-between items-center pt-2 border-t border-gray-200 dark:border-gray-600">
                                    <span
                                        class="text-sm font-medium text-gray-700 dark:text-gray-300">Kembalian:</span>
                                    <span id="changeAmount"
                                        class="text-lg font-bold text-gray-900 dark:text-gray-100">Rp 0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section: Catatan -->
            <div
                class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700 mt-6">
                <h3
                    class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600 dark:text-indigo-400"
                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    Catatan
                </h3>

                <textarea id="notes" name="notes" rows="3"
                    class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
                    placeholder="Tambahkan catatan transaksi jika diperlukan...">{{ old('notes') }}</textarea>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-3 mt-6">
                <button type="button" onclick="window.history.back()"
                    class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600">
                    Batal
                </button>
                <button type="submit" name="save_as_draft" value="1"
                    class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600">
                    Simpan sebagai Draft
                </button>
                <button type="submit"
                    class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 border border-transparent rounded-md shadow-sm">
                    Proses Transaksi
                </button>
            </div>
        </form>
    </div>

    @push('scripts')
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13"></script>
        <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>

        <script>
            function createItemRow() {
                return `
                        <tr>
                            <td class="px-6 py-4">
                                <select name="product_id[]" required class="product-select w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:text-gray-300">
                                    <option value="">Pilih Produk</option>
                                    @foreach ($products as $product)
                                        <option value="{{ $product->id }}"
                                            data-price="{{ $product->selling_price }}"
                                            data-stock="{{ $product->stock }}">
                                            {{ $product->name }}
                                        </option>
                                    @endforeach
                                </select>
                            </td>
                            <td class="px-6 py-4 available-stock text-gray-900 dark:text-gray-300">0</td>
                            <td class="px-6 py-4">
                                <input type="number" name="quantity[]" required
                                    class="w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:text-gray-300"
                                    value="1" min="1" onchange="calculateSubtotal(this)">
                            </td>
                            <td class="px-6 py-4">
                                <input type="number" name="selling_price[]" required
                                    class="w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:text-gray-300"
                                    value="0" min="0"
                                    onkeypress="return event.charCode >= 48 && event.charCode <= 57"
                                    onchange="calculateSubtotal(this)">
                            </td>
                            <td class="px-6 py-4 subtotal text-gray-900 dark:text-gray-300">Rp 0</td>
                            <td class="px-6 py-4">
                                <button type="button" onclick="removeItem(this)"
                                    class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                                    Hapus
                                </button>
                            </td>
                        </tr>
                    `;
            }

            function updatePrice(select) {
                const tr = select.closest('tr');
                const priceInput = tr.querySelector('input[name="selling_price[]"]');
                const stockDisplay = tr.querySelector('.available-stock');
                const quantityInput = tr.querySelector('input[name="quantity[]"]');
                const selectedOption = select.options[select.selectedIndex];

                quantityInput.addEventListener('input', function() {
                    if (this.value > selectedOption.dataset.stock) {
                        alert('Jumlah melebihi stok!');
                        this.value = selectedOption.dataset.stock;
                    }
                });
                if (selectedOption.value) {
                    const price = selectedOption.dataset.price;
                    const stock = selectedOption.dataset.stock;
                    priceInput.value = price || 0; // Set nilai default tapi tetap bisa diubah
                    stockDisplay.textContent = stock;
                    quantityInput.max = stock;
                } else {
                    priceInput.value = 0;
                    stockDisplay.textContent = 0;
                    quantityInput.max = 0;
                }

                calculateSubtotal(priceInput);
            }

            function calculateSubtotal(input) {
                const tr = input.closest('tr');
                const quantity = Math.round(tr.querySelector('input[name="quantity[]"]').value || 0);
                const price = Math.round(tr.querySelector('input[name="selling_price[]"]').value || 0);
                const subtotal = quantity * price;
                tr.querySelector('.subtotal').textContent = formatRupiah(subtotal);
                calculateTotal();
            }

            function calculateTotal() {
                const subtotals = document.querySelectorAll('.subtotal');
                let total = 0;
                subtotals.forEach(subtotal => {
                    const value = subtotal.textContent.replace('Rp ', '').replace(/\./g, '');
                    total += parseFloat(value) || 0;
                });
                document.getElementById('totalAmount').textContent = formatRupiah(total);

                // Panggil calculateFinalTotal untuk menerapkan diskon
                calculateFinalTotal();
            }

            function calculateFinalTotal() {
                const totalText = document.getElementById('totalAmount').textContent;
                const total = parseFloat(totalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                const discount = parseFloat(document.getElementById('discount').value) || 0;

                // Hitung total akhir setelah diskon
                const finalTotal = Math.max(0, total - discount);
                document.getElementById('finalAmount').textContent = formatRupiah(finalTotal);

                // Perbarui perhitungan pembayaran berdasarkan metode pembayaran
                const paymentMethod = document.getElementById('payment_method').value;
                if (paymentMethod === 'credit') {
                    calculateRemainingAmount();
                } else {
                    calculateChange();
                }
            }

            function setExactAmount() {
                const finalText = document.getElementById('finalAmount').textContent;
                const finalTotal = parseFloat(finalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                document.getElementById('paid_amount').value = finalTotal;
                calculateChange();
            }

            function calculateChange() {
                const finalText = document.getElementById('finalAmount').textContent; // Use finalAmount
                const finalTotal = parseFloat(finalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                const paid = parseFloat(document.getElementById('paid_amount').value) || 0;
                const change = paid - finalTotal;
                document.getElementById('changeAmount').textContent = formatRupiah(Math.max(0, change));

                // Validasi jumlah yang dibayar minimum
                const submitButton = document.querySelector('button[type="submit"]');
                const paymentMethod = document.getElementById('payment_method').value;

                if (paymentMethod !== 'credit' && paid < finalTotal) {
                    // Nonaktifkan tombol submit hanya untuk transaksi non-kredit
                    submitButton.disabled = true;
                    submitButton.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    submitButton.disabled = false;
                    submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
                }
            }

            function addInputValidations() {
                // Prevent negative values in all number inputs
                document.querySelectorAll('input[type="number"]').forEach(input => {
                    input.addEventListener('input', function() {
                        if (parseFloat(this.value) < 0) {
                            this.value = 0;
                        }
                    });
                });
            }
            document.addEventListener('DOMContentLoaded', addInputValidations);

            function calculateRemainingAmount() {
                const totalText = document.getElementById('finalAmount')
                    .textContent; // Changed from totalAmount to finalAmount
                const total = parseFloat(totalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                const dp = parseFloat(document.getElementById('down_payment').value) || 0;
                const remaining = total - dp;

                document.getElementById('remainingAmount').textContent = formatRupiah(Math.max(0, remaining));

                // Update hidden paid_amount field for backend processing
                document.getElementById('paid_amount').value = dp;
                const dpValue = parseFloat(document.getElementById('down_payment').value) || 0;
                document.getElementById('paid_amount').value = dpValue;

                // Validasi: DP tidak boleh melebihi total
                if (dp > total) {
                    alert('Uang muka tidak boleh melebihi total belanja');
                    document.getElementById('down_payment').value = total;
                    calculateRemainingAmount();
                }
            }

            function setDownPayment(percentage) {
                const finalText = document.getElementById('finalAmount').textContent;
                const finalTotal = parseFloat(finalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                const downPaymentAmount = Math.round(finalTotal * percentage / 100);
                document.getElementById('down_payment').value = downPaymentAmount;
                calculateRemainingAmount();
            }

            function formatRupiah(number) {
                // Hilangkan decimal & format dengan separator ribuan
                return 'Rp ' + Math.round(number).toLocaleString('id-ID', {
                    maximumFractionDigits: 0,
                    currencyDisplay: 'symbol'
                });
            }

            function addItem() {
                const tbody = document.getElementById('saleItems');
                const newRow = $(createItemRow());
                $(tbody).append(newRow);

                newRow.find('.product-select').on('change', function() {
                    updatePrice(this);
                });
                initializeSelect2ForRow(newRow);
            }

            // function initializeSelect2ForRow(row) {
            //     $(row).find('.product-select').select2({
            //         theme: 'tailwind',
            //         placeholder: 'Pilih Produk',
            //         allowClear: true,
            //         width: '100%',
            //         dropdownParent: $(row).closest('div.overflow-x-auto'),
            //         templateResult: formatProductOption,
            //         templateSelection: formatProductSelection
            //     }).on('select2:open', function() {
            //         $('.select2-dropdown').addClass('dark:bg-gray-800 dark:border-gray-700');
            //         $('.select2-search__field').addClass('dark:bg-gray-800 dark:text-gray-300');
            //     });
            // }

            function initializeSelect2ForRow(row) {
                $(row).find('.product-select').select2({
                    theme: 'tailwind',
                    placeholder: 'Pilih Produk',
                    width: '100%',
                    dropdownParent: $('#saleItems').closest('.overflow-x-auto'),
                    templateResult: formatProductOption,
                    templateSelection: formatProductSelection
                });
            }

            document.getElementById('customer_select').addEventListener('change', function() {
                const paymentMethod = document.getElementById('payment_method').value;
                if (paymentMethod === 'credit' && !this.value) {
                    alert('Pilih pelanggan untuk transaksi kredit!');
                }
            });

            function formatProduct(product) {
                if (!product.id) return product.text;

                return $(`
                <div class="flex items-center justify-between py-2">
                    <div class="flex-1">
                        <div class="font-medium dark:text-gray-200">${product.text}</div>
                        ${product.element ?
                            `<div class="text-sm text-gray-500 dark:text-gray-400">
                                                                                                                                                                                                                                                                                                                                                                                        <span class="inline-flex items-center">
                                                                                                                                                                                                                                                                                                                                                                                        <svg class="w-80 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                                                                                                                                                                                                                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                                                                                                                                                                                                                                                                                                                                                        d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                                                                                                                                                                                                                                                                                                                                                                        </svg>
                                                                                                                                                                                                                                                                                                                                                                                        Stok: ${$(product.element).data('stock')}
                                                                                                                                                                                                                                                                                                                                                                                        </span>
                                                                                                                                                                                                                                                                                                                                                                                        <span class="inline-flex items-center ml-3">
                                                                                                                                                                                                                                                                                                                                                                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                                                                                                                                                                                                                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                                                                                                                                                                                                                                                                                                                                                        d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                                                                                                                                                                                                                                                                                                                                                        </svg>
                                                                                                                                                                                                                                                                                                                                                                                        Rp ${parseInt($(product.element).data('price')).toLocaleString('id-ID')}
                                                                                                                                                                                                                                                                                                                                                                                        </span>
                                                                                                                                                                                                                                                                                                                                                                                        </div>`
                            : ''
                        }
                    </div>
                </div>
            `);
            }

            function formatProductOption(product) {
                if (!product.id) return product.text;
                return $(`
        <div class="flex items-center p-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
            <div class="flex-1">
                <div class="font-medium text-gray-900 dark:text-gray-100">
                    ${product.text}
                </div>
                ${product.element ?
                    `<div class="grid grid-cols-2 gap-2 mt-1 text-sm">

                                                                                                                                                                        <div class="flex items-center text-blue-600 dark:text-blue-400">
                                                                                                                                                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                                                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                                                                                                                                                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                                                                                                                                            </svg>
                                                                                                                                                                            <span>Rp ${parseInt($(product.element).data('price')).toLocaleString('id-ID')}</span>
                                                                                                                                                                        </div>
                                                                                                                                                                    </div>`
                    : ''
                }
            </div>
        </div>
    `);
            }

            function formatProductSelection(product) {
                if (!product.id) return product.text;
                return $(`
        <div class="flex items-center">
            <div class="font-medium text-gray-900 dark:text-gray-100">${product.text}</div>
            ${product.element ?
                ``
                : ''
            }
        </div>
    `);
            }

            function removeItem(button) {
                const tbody = document.getElementById('saleItems');
                if (tbody.children.length > 1) {
                    const row = $(button).closest('tr');
                    // Destroy Select2 before removing the row
                    row.find('.product-select').select2('destroy');
                    row.remove();
                    calculateTotal();
                } else {
                    alert('Minimal satu item harus ada');
                }
            }

            function validateProductStock() {
                let isValid = true;
                const rows = document.querySelectorAll('#saleItems tr');

                rows.forEach(row => {
                    const productSelect = row.querySelector('select[name="product_id[]"]');
                    const quantityInput = row.querySelector('input[name="quantity[]"]');
                    const selectedOption = productSelect.options[productSelect.selectedIndex];

                    if (selectedOption && selectedOption.value) {
                        const availableStock = parseInt(selectedOption.dataset.stock);
                        const requestedQuantity = parseInt(quantityInput.value);

                        if (requestedQuantity > availableStock) {
                            alert(
                                `Stok tidak mencukupi untuk produk ${selectedOption.text}. Tersedia: ${availableStock}`
                            );
                            isValid = false;
                        }
                    }
                });

                return isValid;
            }

            // Validasi form sebelum submit
            document.getElementById('saleForm').addEventListener('submit', function(e) {
                const tbody = document.getElementById('saleItems');
                if (tbody.children.length === 0) {
                    e.preventDefault();
                    alert('Tambahkan setidaknya satu item');
                    return false;
                }

                // Call the stock validation function
                if (!validateProductStock()) {
                    e.preventDefault();
                    return false;
                }

                const paymentMethod = document.getElementById('payment_method').value;
                const totalText = document.getElementById('finalAmount')
                    .textContent; // Use finalAmount instead of totalAmount
                const total = parseFloat(totalText.replace('Rp ', '').replace(/\./g, '')) || 0;
                const paid = parseFloat(document.getElementById('paid_amount').value) || 0;

                // Validasi jumlah yang dibayar untuk metode pembayaran non-kredit
                if (paymentMethod !== 'credit' && paid < total) {
                    e.preventDefault();
                    alert('Jumlah yang dibayar harus lebih besar atau sama dengan total belanja');
                    return false;
                }

                // Validasi pemilihan pelanggan untuk pembayaran kredit
                if (paymentMethod === 'credit') {
                    if (!document.getElementById('customer_select').value) {
                        e.preventDefault();
                        alert('Transaksi kredit harus memilih pelanggan');
                        return false;
                    }
                }

                return true;
            });

            function debounce(func, timeout = 300) {
                let timer;
                return (...args) => {
                    clearTimeout(timer);
                    timer = setTimeout(() => {
                        func.apply(this, args);
                    }, timeout);
                };
            }

            const debouncedCalculateTotal = debounce(calculateTotal, 500);

            function updatePaymentSections() {
                const paymentMethod = document.getElementById('payment_method').value;
                const dpSection = document.getElementById('dp_container');
                const cashSection = document.getElementById('cash-payment-section');

                switch (paymentMethod) {
                    case 'credit':
                        dpSection.classList.remove('hidden');
                        cashSection.classList.add('hidden');
                        break;
                    case 'transfer':
                    case 'cash':
                        dpSection.classList.add('hidden');
                        cashSection.classList.remove('hidden');
                        break;
                }
            }
            // Fallback if Select2 fails to load
            if (typeof $.fn.select2 !== 'function') {
                console.error('Select2 library not loaded');
                // Implement fallback native select behavior
            }
            // Add event listener for payment method change
            document.getElementById('payment_method').addEventListener('change', function() {
                const dpSection = document.getElementById('dp_container');
                const cashSection = document.getElementById('cash-payment-section');
                const submitButton = document.querySelector('button[type="submit"]');
                const paidAmountInput = document.getElementById('paid_amount');
                const dpInput = document.getElementById('down_payment');

                if (this.value === 'credit') {
                    // Untuk pembayaran kredit
                    dpSection.classList.remove('hidden');
                    cashSection.classList.add('hidden');

                    // Reset nilai
                    dpInput.value = '0';
                    paidAmountInput.value = '0';

                    // Enable submit button untuk kredit
                    submitButton.disabled = false;
                    submitButton.classList.remove('opacity-50', 'cursor-not-allowed');

                    // Periksa pelanggan
                    if (!document.getElementById('customer_select').value) {
                        alert('Untuk pembayaran kredit, pilih pelanggan terlebih dahulu');
                    }

                    // Hitung sisa hutang
                    calculateRemainingAmount();
                } else {
                    // Untuk pembayaran tunai/transfer
                    dpSection.classList.add('hidden');
                    cashSection.classList.remove('hidden');

                    // Reset nilai DP
                    dpInput.value = '0';

                    // Hitung ulang kembalian
                    calculateChange();
                }
            });



            // Inisialisasi Select2
            $('#customer_select').select2({
                theme: 'tailwind',
                tags: true, // Mengizinkan pembuatan tag baru
                placeholder: 'Pilih atau ketik nama pelanggan baru',
                allowClear: true,
                createTag: function(params) {
                    // Jika input kosong, jangan buat tag
                    if ($.trim(params.term) === '') {
                        return null;
                    }


                    return {
                        id: 'new:' + params.term,
                        text: params.term,
                        newTag: true
                    }
                },
                templateResult: function(data) {

                    if (data.loading) return data.text;

                    var $container = $("<div class='select2-result-customer'></div>");

                    if (data.newTag) {
                        // Format untuk customer baru
                        $container.append(
                            $("<div class='text-blue-600'><i class='fas fa-plus-circle mr-1'></i> Tambah pelanggan baru: " +
                                data.text + "</div>")
                        );
                    } else {
                        // Format untuk customer yang sudah ada
                        $container.append(
                            $("<div>" + data.text + "</div>")
                        );
                    }

                    return $container;
                },
                templateSelection: function(data) {
                    if (data.newTag) {
                        return "Pelanggan Baru: " + data.text;
                    }
                    return data.text;
                }
            });

            // Event handler saat nilai select berubah
            $('#customer_select').on('change', function(e) {
                var selectedValue = $(this).val();

                if (selectedValue && selectedValue.startsWith('new:')) {
                    // Ekstrak nama pelanggan baru
                    var newCustomerName = selectedValue.substring(4);

                    // Set nilai di hidden input
                    $('#new_customer_name').val(newCustomerName);

                    // Opsional: tambahkan visual feedback
                    $(this).next('.select2-container').find('.select2-selection').addClass('border-blue-500');
                } else {
                    // Reset hidden input jika memilih customer yang sudah ada
                    $('#new_customer_name').val('');
                    $(this).next('.select2-container').find('.select2-selection').removeClass('border-blue-500');
                }
            });

            // Tangani pengiriman form untuk memisahkan customer_id vs customer_name
            $('#saleForm').on('submit', function() {
                var customerSelect = $('#customer_select');
                var selectedOption = customerSelect.val();

                // Jika nilai yang dipilih dimulai dengan 'new:', itu adalah nama pelanggan baru
                if (selectedOption && selectedOption.startsWith('new:')) {
                    // Ekstrak bagian nama
                    var newName = selectedOption.substring(4);

                    // Setel nama pelanggan baru di input tersembunyi
                    $('#new_customer_name').val(newName);

                    // Reset customer_id menjadi kosong karena kita membuat pelanggan baru
                    customerSelect.val('');
                }

                return true;
            });

            // Tambahkan item pertama saat halaman dimuat
            document.addEventListener('DOMContentLoaded', function() {
                $('.product-select').each(function() {
                    initializeSelect2ForRow($(this).closest('tr'));
                });

                // Add first row on page load if needed
                if ($('#saleItems tr').length === 0) {
                    addItem();
                }

                // Initialize payment sections based on initial payment method
                updatePaymentSections();
            });

            function checkSelect2Loading() {
                if (typeof $.fn.select2 === 'undefined') {
                    console.error('Select2 not loaded - using native select elements');
                    document.querySelectorAll('.product-select, #customer_select').forEach(select => {
                        select.style.display = 'block';
                        select.classList.add('w-full', 'rounded-md', 'border-gray-300', 'dark:border-gray-600',
                            'dark:bg-gray-700', 'dark:text-gray-300');

                        // Add direct event listeners for native selects
                        if (select.classList.contains('product-select')) {
                            select.addEventListener('change', function() {
                                updatePrice(this);
                            });
                        }
                    });
                }
            }
            setTimeout(checkSelect2Loading, 1000);

            setTimeout(() => {
                if (typeof $.fn.select2 === 'undefined') {
                    document.querySelectorAll('.product-select').forEach(select => {
                        select.style.display = 'block'; // Tampilkan native select
                    });
                }
            }, 1000);
            // When a product is selected
        $('.product-select').on('change', function() {
            const productId = $(this).val();
            const row = $(this).closest('.product-row');

            if (productId) {
                $.get(`/products/${productId}/get`, function(data) {
                    // Populate unit dropdown
                    const unitSelect = row.find('.unit-select');
                    unitSelect.empty();

                    data.units.forEach(unit => {
                        unitSelect.append(`<option value="${unit.id}"
                            data-selling-price="${unit.selling_price}"
                            data-available="${unit.available_stock}"
                            data-conversion="${unit.conversion_factor}"
                            ${unit.is_default ? 'selected' : ''}>
                            ${unit.abbreviation} (${unit.available_stock} tersedia)
                        </option>`);
                    });

                    // Update price and available stock based on selected unit
                    updatePriceAndStock(unitSelect);
                });
            }
        });

        // When unit is changed
        $('.unit-select').on('change', function() {
            updatePriceAndStock($(this));
        });

        function updatePriceAndStock(unitSelect) {
            const row = unitSelect.closest('.product-row');
            const selectedOption = unitSelect.find('option:selected');

            // Update price
            const price = selectedOption.data('selling-price');
            row.find('.selling-price').val(price);

            // Update available stock display
            const availableStock = selectedOption.data('available');
            row.find('.available-stock').text(availableStock);

            // Set max quantity
            row.find('.quantity-input').attr('max', availableStock);

            // Recalculate subtotal
            calculateSubtotal(row);
        }
        </script>
    @endpush
</x-app-layout>
