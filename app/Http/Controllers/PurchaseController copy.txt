<?php

namespace App\Http\Controllers;

use App\Models\Purchase;
use App\Http\Requests\StorePurchaseRequest;
use App\Http\Requests\UpdatePurchaseRequest;
use App\Models\Product;
use App\Models\PurchaseReceipt;
use App\Models\PurchaseReceiptDetail;
use App\Models\Supplier;
use Carbon\Carbon;
use Illuminate\Http\Request;

class PurchaseController extends Controller
{
    public function index()
    {
        $purchases = Purchase::with(['supplier', 'user'])
            ->latest()
            ->paginate(10);

        return view('purchases.index', compact('purchases'));
    }

    public function create()
    {
        $suppliers = Supplier::orderBy('name')->get();
        $products = Product::orderBy('name')->get();

        // Generate unique invoice number
        $today = Carbon::today();
        $lastPurchase = Purchase::whereDate('created_at', $today)->latest()->first();
        $lastNumber = $lastPurchase ? intval(substr($lastPurchase->invoice_number, -4)) : 0;
        $invoiceNumber = 'PO-' . $today->format('Ymd') . '-' . str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);

        return view('purchases.create', compact('suppliers', 'products', 'invoiceNumber'));
    }

    public function store(Request $request)
    {
         // Validate the request
    $validated = $request->validate([
        'supplier_id' => 'required|exists:suppliers,id',
        'date' => 'required|date',
        'product_id' => 'required|array',
        'product_id.*' => 'exists:products,id',
        'quantity' => 'required|array',
        'quantity.*' => 'numeric|min:1',
        'purchase_price' => 'required|array',
        'purchase_price.*' => 'numeric|min:0',
        'notes' => 'nullable|string',
    ]);

    // Generate a new invoice number to ensure uniqueness
    $today = now();
    $lastPurchase = Purchase::whereDate('created_at', $today)->latest()->first();
    $lastNumber = $lastPurchase ? intval(substr($lastPurchase->invoice_number, -4)) : 0;
    $invoiceNumber = 'PO-' . $today->format('Ymd') . '-' . str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);

    // Create the purchase
    $purchase = Purchase::create([
        'invoice_number' => $invoiceNumber,
        'supplier_id' => $request->supplier_id,
        'user_id' => auth()->id(),
        'date' => $request->date,
        'total_amount' => 0, // Will be updated after details are added
        'notes' => $request->notes,
        'status' => 'pending'
    ]);

        $products = Product::findMany($request->product_id);
        $totalAmount = 0;

        foreach ($request->product_id as $key => $productId) {
            $product = $products->firstWhere('id', $productId);
            $quantity = $request->quantity[$key];
            $price = $request->purchase_price[$key];
            $subtotal = $quantity * $price;
            $totalAmount += $subtotal;

            // Create purchase detail
            $purchase->purchaseDetails()->create([
                'product_id' => $productId,
                'quantity' => $quantity,
                'purchase_price' => $price,
                'subtotal' => $subtotal,
                'received_quantity' => 0
            ]);
        }

        // Update total amount
        $purchase->update(['total_amount' => $totalAmount]);

        return redirect()
            ->route('purchases.index')
            ->with('success', 'Pembelian berhasil ditambahkan');
    }

    public function show(Purchase $purchase)
    {
        $purchase->load(['supplier', 'purchaseDetails.product']);
        return view('purchases.show', compact('purchase'));
    }

    public function edit(Purchase $purchase)
    {
        // Pembelian tidak bisa diedit
        return redirect()->route('purchases.show', $purchase);
    }

    public function update(Request $request, Purchase $purchase)
    {
        // Pembelian tidak bisa diupdate
        return redirect()->route('purchases.show', $purchase);
    }

    public function destroy(Purchase $purchase)
    {
        // Load purchase details sebelum pembatalan
        $purchase->load('purchaseDetails.product');

        // Batalkan setiap detail pembelian
        $purchase = Purchase::with('purchaseDetails.product')->findOrFail($purchase->id);

        foreach ($purchase->purchaseDetails as $detail) {
            $product = $detail->product;
            $beforeStock = $product->stock;

            // Kurangi stok
            $product->stock -= $detail->quantity;
            $product->save();

            // Catat pergerakan stok
            $product->stockMovements()->create([
                'type' => 'out',
                'quantity' => $detail->quantity,
                'before_stock' => $beforeStock,
                'after_stock' => $product->stock,
                'reference_type' => 'purchase_void',
                'reference_id' => $purchase->id,
                'notes' => 'Pembatalan pembelian'
            ]);
        }


        // Soft delete pembelian
        $purchase->delete();

        return redirect()
            ->route('purchases.index')
            ->with('success', 'Pembelian berhasil dibatalkan');
    }

    public function createReceipt(Purchase $purchase)
    {
        if ($purchase->isReceived()) {
            return redirect()->route('purchases.show', $purchase)
                ->with('error', 'This purchase has already been fully received.');
        }

        $purchase->load('purchaseDetails.product');

        // Generate receipt number
        $lastReceipt = PurchaseReceipt::whereDate('created_at', now())->latest()->first();
        $lastNumber = $lastReceipt ? intval(substr($lastReceipt->receipt_number, -4)) : 0;
        $receiptNumber = 'RCV-' . date('Ymd') . '-' . str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);

        return view('purchases.receipt', compact('purchase', 'receiptNumber'));
    }

    public function storeReceipt(Request $request, Purchase $purchase)
    {
        $request->validate([
            'receipt_date' => 'required|date',
            'receipt_number' => 'required|string|unique:purchase_receipts',
            'receipt_file' => 'nullable|file|mimes:jpeg,png,jpg,pdf|max:2048',
            'notes' => 'nullable|string',
            'received_quantity' => 'required|array',
            'received_quantity.*' => 'integer|min:0',
        ]);

        // Check if at least one item is being received
        $totalReceived = array_sum($request->received_quantity);
        if ($totalReceived <= 0) {
            return back()->with('error', 'At least one item must be received.');
        }

        // Handle file upload
        $receiptFilePath = null;
        if ($request->hasFile('receipt_file')) {
            $file = $request->file('receipt_file');
            $fileName = time() . '_' . $file->getClientOriginalName();
            $receiptFilePath = $file->storeAs('receipts', $fileName, 'public');
        }

        // Create receipt record
        $receipt = PurchaseReceipt::create([
            'purchase_id' => $purchase->id,
            'user_id' => auth()->id(),
            'receipt_date' => $request->receipt_date,
            'receipt_number' => $request->receipt_number,
            'receipt_file' => $receiptFilePath,
            'notes' => $request->notes,
        ]);

        // Process each item
        $allItemsReceived = true;

        foreach ($purchase->purchaseDetails as $detail) {
            $receivedQty = (int) $request->received_quantity[$detail->id];

            if ($receivedQty > 0) {
                // Create receipt detail
                PurchaseReceiptDetail::create([
                    'purchase_receipt_id' => $receipt->id,
                    'purchase_detail_id' => $detail->id,
                    'product_id' => $detail->product_id,
                    'received_quantity' => $receivedQty,
                ]);

                // Update received quantity in purchase detail
                $newReceivedQty = $detail->received_quantity + $receivedQty;
                $detail->update(['received_quantity' => $newReceivedQty]);

                // Update product stock
                $detail->product->increment('stock', $receivedQty);

                // Check if this item is fully received
                if ($newReceivedQty < $detail->quantity) {
                    $allItemsReceived = false;
                }
            } else {
                // If any item has not been fully received
                if ($detail->received_quantity < $detail->quantity) {
                    $allItemsReceived = false;
                }
            }
        }

        // Update purchase status
        if ($allItemsReceived) {
            $purchase->update(['status' => 'received']);
        } else {
            $purchase->update(['status' => 'partially_received']);
        }

        return redirect()->route('purchases.show', $purchase)
            ->with('success', 'Purchase receipt has been recorded successfully.');
    }
}
